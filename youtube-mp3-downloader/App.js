import React, { useState, useRef } from "react";
import {
  View,
  TextInput,
  TouchableOpacity,
  Text,
  StyleSheet,
  Animated,
} from "react-native";
import axios from "axios";

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
const AnimatedTitle = () => {
  const fadeAnim = useRef(new Animated.Value(0)).current;

  React.useEffect(() => {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –ø—É–ª—å—Å–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    Animated.loop(
      Animated.sequence([
        Animated.timing(fadeAnim, { toValue: 1, duration: 1000, useNativeDriver: false }),
        Animated.timing(fadeAnim, { toValue: 0.7, duration: 1000, useNativeDriver: false }),
      ])
    ).start();
  }, []);

  return (
    <Animated.View style={[styles.titleContainer, { opacity: fadeAnim }]}>
      <Text style={styles.title}>üéµ MP3 Magic Downloader</Text>
    </Animated.View>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
const AnimatedButton = ({ onPress, isLoading, title }) => {
  const scaleAnim = useRef(new Animated.Value(1)).current;

  const handlePressIn = () => {
    Animated.spring(scaleAnim, { toValue: 0.95, friction: 5, useNativeDriver: false }).start();
  };

  const handlePressOut = () => {
    Animated.spring(scaleAnim, { toValue: 1, friction: 5, useNativeDriver: false }).start();
  };

  return (
    <Animated.View style={{ transform: [{ scale: scaleAnim }] }}>
      <TouchableOpacity
        style={[styles.button, isLoading && styles.buttonDisabled]}
        onPress={isLoading ? null : onPress}
        onPressIn={handlePressIn}
        onPressOut={handlePressOut}
        activeOpacity={0.9}
      >
        <Text style={styles.buttonText}>{title}</Text>
      </TouchableOpacity>
    </Animated.View>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π —Ñ–æ–∫—É—Å–∞
const AnimatedInput = ({ onChangeText, value, placeholder }) => {
  const [isFocused, setIsFocused] = useState(false);
  const borderAnim = useRef(new Animated.Value(0)).current;

  React.useEffect(() => {
    // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
    Animated.timing(borderAnim, {
      toValue: isFocused ? 1 : 0,
      duration: 200,
      useNativeDriver: false,
    }).start();
  }, [isFocused]);

  const borderColor = borderAnim.interpolate({
    inputRange: [0, 1],
    outputRange: ["#ddd", "#ff6f61"],
  });

  return (
    <Animated.View style={[styles.inputContainer, { borderColor }]}>
      <TextInput
        style={styles.input}
        placeholder={placeholder}
        placeholderTextColor="#aaa"
        onChangeText={onChangeText}
        value={value}
        onFocus={() => setIsFocused(true)}
        onBlur={() => setIsFocused(false)}
      />
    </Animated.View>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
const ProgressBar = ({ progress }) => {
  const widthAnim = useRef(new Animated.Value(0)).current;

  React.useEffect(() => {
    // –ê–Ω–∏–º–∞—Ü–∏—è —à–∏—Ä–∏–Ω—ã –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    Animated.timing(widthAnim, {
      toValue: progress,
      duration: 300,
      useNativeDriver: false,
    }).start();
  }, [progress]);

  const width = widthAnim.interpolate({
    inputRange: [0, 100],
    outputRange: ["0%", "100%"],
  });

  return (
    <View style={styles.progressContainer}>
      <Animated.View style={[styles.progressBar, { width }]} />
    </View>
  );
};

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export default function App() {
  const [url, setUrl] = useState("");
  const [status, setStatus] = useState("");
  const [progress, setProgress] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const serverUrl = "http://26.27.56.35:5000"; // –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞

  // –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è MP3
  const downloadMp3 = async () => {
    if (!url) {
      setStatus("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É!");
      return;
    }

    setIsLoading(true);
    setProgress(0);
    setStatus("–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ...");

    try {
      // –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
      const infoResponse = await axios.get(`${serverUrl}/info?url=${encodeURIComponent(url)}`);
      const videoTitle = infoResponse.data.title || "audio";

      setProgress(20);
      setStatus("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∏–¥–µ–æ –≤ MP3...");

      // –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
      const response = await axios.post(
        `${serverUrl}/download`,
        { url },
        { responseType: "arraybuffer" }
      );

      setProgress(60);
      setStatus("–°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...");

      // –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      const blob = new Blob([response.data], { type: "audio/mp3" });
      const downloadUrl = window.URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = downloadUrl;
      link.setAttribute("download", `${videoTitle}.mp3`);
      document.body.appendChild(link);
      link.click();

      setProgress(100);
      setStatus("–ì–æ—Ç–æ–≤–æ! –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω.");
      setTimeout(() => {
        setStatus("");
        setProgress(0);
      }, 2000);
    } catch (error) {
      setStatus(`–û—à–∏–±–∫–∞: ${error.message}`);
      console.error("Download error:", error);
    } finally {
      setIsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è –≤–≤–æ–¥–∞
  const clearInput = () => {
    setUrl("");
    setStatus("–ü–æ–ª–µ –æ—á–∏—â–µ–Ω–æ");
    setProgress(0);
    setTimeout(() => setStatus(""), 1500);
  };

  return (
    <View style={styles.container}>
      <AnimatedTitle />
      <AnimatedInput
        onChangeText={setUrl}
        value={url}
        placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube"
      />
      <View style={styles.buttonContainer}>
        <AnimatedButton onPress={downloadMp3} isLoading={isLoading} title="–°–∫–∞—á–∞—Ç—å" />
        <AnimatedButton onPress={clearInput} isLoading={isLoading} title="–û—á–∏—Å—Ç–∏—Ç—å" />
      </View>
      {progress > 0 && <ProgressBar progress={progress} />}
      <Animated.View style={styles.statusContainer}>
        <Text style={[styles.status, status.includes("–û—à–∏–±–∫–∞") ? styles.error : styles.success]}>
          {status}
        </Text>
      </Animated.View>
    </View>
  );
}

// –°—Ç–∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#f0f4f8",
    padding: 20,
  },
  titleContainer: {
    marginBottom: 40,
  },
  title: {
    fontSize: 32,
    fontWeight: "bold",
    color: "#ff6f61",
    textShadow: "1px 1px 4px rgba(0, 0, 0, 0.2)",
  },
  inputContainer: {
    width: "90%",
    borderWidth: 2,
    borderRadius: 15,
    marginBottom: 25,
    backgroundColor: "#fff",
    elevation: 5,
  },
  input: {
    padding: 15,
    fontSize: 16,
    color: "#333",
  },
  buttonContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    width: "90%",
    marginBottom: 20,
  },
  button: {
    backgroundColor: "#ff6f61",
    paddingVertical: 12,
    paddingHorizontal: 25,
    borderRadius: 25,
    marginHorizontal: 10,
    elevation: 4,
  },
  buttonDisabled: {
    backgroundColor: "#ffb3ae",
  },
  buttonText: {
    color: "#fff",
    textAlign: "center",
    fontSize: 16,
    fontWeight: "700",
  },
  progressContainer: {
    width: "90%",
    height: 10,
    backgroundColor: "#ddd",
    borderRadius: 5,
    overflow: "hidden",
    marginVertical: 10,
  },
  progressBar: {
    height: "100%",
    backgroundColor: "#ff6f61",
  },
  statusContainer: {
    marginTop: 20,
    padding: 10,
    borderRadius: 8,
    backgroundColor: "rgba(255, 255, 255, 0.9)",
  },
  status: {
    fontSize: 16,
    fontWeight: "500",
    textAlign: "center",
  },
  error: {
    color: "#ff4444",
  },
  success: {
    color: "#00cc00",
  },
});